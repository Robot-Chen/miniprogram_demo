var CHAR_TILDE = 126;

var CODE_FNC1 = 102;

var SET_STARTA = 103;

var SET_STARTB = 104;

var SET_STARTC = 105;

var SET_SHIFT = 98;

var SET_CODEA = 101;

var SET_CODEB = 100;

var SET_STOP = 106;

var REPLACE_CODES = {
    CHAR_TILDE: CODE_FNC1
};

var CODESET = {
    ANY: 1,
    AB: 2,
    A: 3,
    B: 4,
    C: 5
};

function getBytes(str) {
    var bytes = [];
    for (var i = 0; i < str.length; i++) {
        bytes.push(str.charCodeAt(i));
    }
    return bytes;
}

exports.code128 = function(ctx, text, width, height) {
    width = parseInt(width);
    height = parseInt(height);
    var codes = stringToCode128(text);
    var g = new Graphics(ctx, width, height);
    var barWeight = g.area.width / ((codes.length - 3) * 11 + 35);
    var x = g.area.left;
    var y = g.area.top;
    for (var i = 0; i < codes.length; i++) {
        var c = codes[i];
        //two bars at a time: 1 black and 1 white
                for (var bar = 0; bar < 8; bar += 2) {
            var barW = PATTERNS[c][bar] * barWeight;
            // var barH = height - y - this.border;
                        var barH = height - y;
            var spcW = PATTERNS[c][bar + 1] * barWeight;
            //no need to draw if 0 width
                        if (barW > 0) {
                g.fillFgRect(x, y, barW, barH);
            }
            x += barW + spcW;
        }
    }
    ctx.draw();
};

function stringToCode128(text) {
    var barc = {
        currcs: CODESET.C
    };
    var bytes = getBytes(text);
    //decide starting codeset
        var index = bytes[0] == CHAR_TILDE ? 1 : 0;
    var csa1 = bytes.length > 0 ? codeSetAllowedFor(bytes[index++]) : CODESET.AB;
    var csa2 = bytes.length > 0 ? codeSetAllowedFor(bytes[index++]) : CODESET.AB;
    barc.currcs = getBestStartSet(csa1, csa2);
    barc.currcs = perhapsCodeC(bytes, barc.currcs);
    //if no codeset changes this will end up with bytes.length+3
    //start, checksum and stop
        var codes = new Array();
    switch (barc.currcs) {
      case CODESET.A:
        codes.push(SET_STARTA);
        break;

      case CODESET.B:
        codes.push(SET_STARTB);
        break;

      default:
        codes.push(SET_STARTC);
        break;
    }
    for (var i = 0; i < bytes.length; i++) {
        var b1 = bytes[i];
        //get the first of a pair
        //should we translate/replace
                if (b1 in REPLACE_CODES) {
            codes.push(REPLACE_CODES[b1]);
            i++;
            //jump to next
                        b1 = bytes[i];
        }
        //get the next in the pair if possible
                var b2 = bytes.length > i + 1 ? bytes[i + 1] : -1;
        codes = codes.concat(codesForChar(b1, b2, barc.currcs));
        //code C takes 2 chars each time
                if (barc.currcs == CODESET.C) i++;
    }
    //calculate checksum according to Code 128 standards
        var checksum = codes[0];
    for (var weight = 1; weight < codes.length; weight++) {
        checksum += weight * codes[weight];
    }
    codes.push(checksum % 103);
    codes.push(SET_STOP);
    //encoding should now be complete
        return codes;
    function getBestStartSet(csa1, csa2) {
        //tries to figure out the best codeset
        //to start with to get the most compact code
        var vote = 0;
        vote += csa1 == CODESET.A ? 1 : 0;
        vote += csa1 == CODESET.B ? -1 : 0;
        vote += csa2 == CODESET.A ? 1 : 0;
        vote += csa2 == CODESET.B ? -1 : 0;
        //tie goes to B due to my own predudices
                return vote > 0 ? CODESET.A : CODESET.B;
    }
    function perhapsCodeC(bytes, codeset) {
        for (var i = 0; i < bytes.length; i++) {
            var b = bytes[i];
            if ((b < 48 || b > 57) && b != CHAR_TILDE) return codeset;
        }
        return CODESET.C;
    }
    //chr1 is current byte
    //chr2 is the next byte to process. looks ahead.
        function codesForChar(chr1, chr2, currcs) {
        var result = [];
        var shifter = -1;
        if (charCompatible(chr1, currcs)) {
            if (currcs == CODESET.C) {
                if (chr2 == -1) {
                    shifter = SET_CODEB;
                    currcs = CODESET.B;
                } else if (chr2 != -1 && !charCompatible(chr2, currcs)) {
                    //need to check ahead as well
                    if (charCompatible(chr2, CODESET.A)) {
                        shifter = SET_CODEA;
                        currcs = CODESET.A;
                    } else {
                        shifter = SET_CODEB;
                        currcs = CODESET.B;
                    }
                }
            }
        } else {
            //if there is a next char AND that next char is also not compatible
            if (chr2 != -1 && !charCompatible(chr2, currcs)) {
                //need to switch code sets
                switch (currcs) {
                  case CODESET.A:
                    shifter = SET_CODEB;
                    currcs = CODESET.B;
                    break;

                  case CODESET.B:
                    shifter = SET_CODEA;
                    currcs = CODESET.A;
                    break;
                }
            } else {
                //no need to shift code sets, a temporary SHIFT will suffice
                shifter = SET_SHIFT;
            }
        }
        //ok some type of shift is nessecary
                if (shifter != -1) {
            result.push(shifter);
            result.push(codeValue(chr1));
        } else {
            if (currcs == CODESET.C) {
                //include next as well
                result.push(codeValue(chr1, chr2));
            } else {
                result.push(codeValue(chr1));
            }
        }
        barc.currcs = currcs;
        return result;
    }
}

//reduce the ascii code to fit into the Code128 char table
function codeValue(chr1, chr2) {
    if (typeof chr2 == "undefined") {
        return chr1 >= 32 ? chr1 - 32 : chr1 + 64;
    } else {
        return parseInt(String.fromCharCode(chr1) + String.fromCharCode(chr2));
    }
}

function charCompatible(chr, codeset) {
    var csa = codeSetAllowedFor(chr);
    if (csa == CODESET.ANY) return true;
    //if we need to change from current
        if (csa == CODESET.AB) return true;
    if (csa == CODESET.A && codeset == CODESET.A) return true;
    if (csa == CODESET.B && codeset == CODESET.B) return true;
    return false;
}

function codeSetAllowedFor(chr) {
    if (chr >= 48 && chr <= 57) {
        //0-9
        return CODESET.ANY;
    } else if (chr >= 32 && chr <= 95) {
        //0-9 A-Z
        return CODESET.AB;
    } else {
        //if non printable
        return chr < 32 ? CODESET.A : CODESET.B;
    }
}

var Graphics = function Graphics(ctx, width, height) {
    this.width = width;
    this.height = height;
    this.quiet = Math.round(this.width / 40);
    this.border_size = 0;
    this.padding_width = 0;
    this.area = {
        width: width - this.padding_width * 2 - this.quiet * 2,
        height: height - this.border_size * 2,
        top: this.border_size - 4,
        left: this.padding_width + this.quiet
    };
    this.ctx = ctx;
    this.fg = "#000000";
    this.bg = "#ffffff";
    // fill background
        this.fillBgRect(0, 0, width, height);
    // fill center to create border
        this.fillBgRect(0, this.border_size, width, height - this.border_size * 2);
};

//use native color
Graphics.prototype._fillRect = function(x, y, width, height, color) {
    this.ctx.setFillStyle(color);
    this.ctx.fillRect(x, y, width, height);
};

Graphics.prototype.fillFgRect = function(x, y, width, height) {
    this._fillRect(x, y, width, height, this.fg);
};

Graphics.prototype.fillBgRect = function(x, y, width, height) {
    this._fillRect(x, y, width, height, this.bg);
};

var PATTERNS = [ [ 2, 1, 2, 2, 2, 2, 0, 0 ], // 0
[ 2, 2, 2, 1, 2, 2, 0, 0 ], // 1
[ 2, 2, 2, 2, 2, 1, 0, 0 ], // 2
[ 1, 2, 1, 2, 2, 3, 0, 0 ], // 3
[ 1, 2, 1, 3, 2, 2, 0, 0 ], // 4
[ 1, 3, 1, 2, 2, 2, 0, 0 ], // 5
[ 1, 2, 2, 2, 1, 3, 0, 0 ], // 6
[ 1, 2, 2, 3, 1, 2, 0, 0 ], // 7
[ 1, 3, 2, 2, 1, 2, 0, 0 ], // 8
[ 2, 2, 1, 2, 1, 3, 0, 0 ], // 9
[ 2, 2, 1, 3, 1, 2, 0, 0 ], // 10
[ 2, 3, 1, 2, 1, 2, 0, 0 ], // 11
[ 1, 1, 2, 2, 3, 2, 0, 0 ], // 12
[ 1, 2, 2, 1, 3, 2, 0, 0 ], // 13
[ 1, 2, 2, 2, 3, 1, 0, 0 ], // 14
[ 1, 1, 3, 2, 2, 2, 0, 0 ], // 15
[ 1, 2, 3, 1, 2, 2, 0, 0 ], // 16
[ 1, 2, 3, 2, 2, 1, 0, 0 ], // 17
[ 2, 2, 3, 2, 1, 1, 0, 0 ], // 18
[ 2, 2, 1, 1, 3, 2, 0, 0 ], // 19
[ 2, 2, 1, 2, 3, 1, 0, 0 ], // 20
[ 2, 1, 3, 2, 1, 2, 0, 0 ], // 21
[ 2, 2, 3, 1, 1, 2, 0, 0 ], // 22
[ 3, 1, 2, 1, 3, 1, 0, 0 ], // 23
[ 3, 1, 1, 2, 2, 2, 0, 0 ], // 24
[ 3, 2, 1, 1, 2, 2, 0, 0 ], // 25
[ 3, 2, 1, 2, 2, 1, 0, 0 ], // 26
[ 3, 1, 2, 2, 1, 2, 0, 0 ], // 27
[ 3, 2, 2, 1, 1, 2, 0, 0 ], // 28
[ 3, 2, 2, 2, 1, 1, 0, 0 ], // 29
[ 2, 1, 2, 1, 2, 3, 0, 0 ], // 30
[ 2, 1, 2, 3, 2, 1, 0, 0 ], // 31
[ 2, 3, 2, 1, 2, 1, 0, 0 ], // 32
[ 1, 1, 1, 3, 2, 3, 0, 0 ], // 33
[ 1, 3, 1, 1, 2, 3, 0, 0 ], // 34
[ 1, 3, 1, 3, 2, 1, 0, 0 ], // 35
[ 1, 1, 2, 3, 1, 3, 0, 0 ], // 36
[ 1, 3, 2, 1, 1, 3, 0, 0 ], // 37
[ 1, 3, 2, 3, 1, 1, 0, 0 ], // 38
[ 2, 1, 1, 3, 1, 3, 0, 0 ], // 39
[ 2, 3, 1, 1, 1, 3, 0, 0 ], // 40
[ 2, 3, 1, 3, 1, 1, 0, 0 ], // 41
[ 1, 1, 2, 1, 3, 3, 0, 0 ], // 42
[ 1, 1, 2, 3, 3, 1, 0, 0 ], // 43
[ 1, 3, 2, 1, 3, 1, 0, 0 ], // 44
[ 1, 1, 3, 1, 2, 3, 0, 0 ], // 45
[ 1, 1, 3, 3, 2, 1, 0, 0 ], // 46
[ 1, 3, 3, 1, 2, 1, 0, 0 ], // 47
[ 3, 1, 3, 1, 2, 1, 0, 0 ], // 48
[ 2, 1, 1, 3, 3, 1, 0, 0 ], // 49
[ 2, 3, 1, 1, 3, 1, 0, 0 ], // 50
[ 2, 1, 3, 1, 1, 3, 0, 0 ], // 51
[ 2, 1, 3, 3, 1, 1, 0, 0 ], // 52
[ 2, 1, 3, 1, 3, 1, 0, 0 ], // 53
[ 3, 1, 1, 1, 2, 3, 0, 0 ], // 54
[ 3, 1, 1, 3, 2, 1, 0, 0 ], // 55
[ 3, 3, 1, 1, 2, 1, 0, 0 ], // 56
[ 3, 1, 2, 1, 1, 3, 0, 0 ], // 57
[ 3, 1, 2, 3, 1, 1, 0, 0 ], // 58
[ 3, 3, 2, 1, 1, 1, 0, 0 ], // 59
[ 3, 1, 4, 1, 1, 1, 0, 0 ], // 60
[ 2, 2, 1, 4, 1, 1, 0, 0 ], // 61
[ 4, 3, 1, 1, 1, 1, 0, 0 ], // 62
[ 1, 1, 1, 2, 2, 4, 0, 0 ], // 63
[ 1, 1, 1, 4, 2, 2, 0, 0 ], // 64
[ 1, 2, 1, 1, 2, 4, 0, 0 ], // 65
[ 1, 2, 1, 4, 2, 1, 0, 0 ], // 66
[ 1, 4, 1, 1, 2, 2, 0, 0 ], // 67
[ 1, 4, 1, 2, 2, 1, 0, 0 ], // 68
[ 1, 1, 2, 2, 1, 4, 0, 0 ], // 69
[ 1, 1, 2, 4, 1, 2, 0, 0 ], // 70
[ 1, 2, 2, 1, 1, 4, 0, 0 ], // 71
[ 1, 2, 2, 4, 1, 1, 0, 0 ], // 72
[ 1, 4, 2, 1, 1, 2, 0, 0 ], // 73
[ 1, 4, 2, 2, 1, 1, 0, 0 ], // 74
[ 2, 4, 1, 2, 1, 1, 0, 0 ], // 75
[ 2, 2, 1, 1, 1, 4, 0, 0 ], // 76
[ 4, 1, 3, 1, 1, 1, 0, 0 ], // 77
[ 2, 4, 1, 1, 1, 2, 0, 0 ], // 78
[ 1, 3, 4, 1, 1, 1, 0, 0 ], // 79
[ 1, 1, 1, 2, 4, 2, 0, 0 ], // 80
[ 1, 2, 1, 1, 4, 2, 0, 0 ], // 81
[ 1, 2, 1, 2, 4, 1, 0, 0 ], // 82
[ 1, 1, 4, 2, 1, 2, 0, 0 ], // 83
[ 1, 2, 4, 1, 1, 2, 0, 0 ], // 84
[ 1, 2, 4, 2, 1, 1, 0, 0 ], // 85
[ 4, 1, 1, 2, 1, 2, 0, 0 ], // 86
[ 4, 2, 1, 1, 1, 2, 0, 0 ], // 87
[ 4, 2, 1, 2, 1, 1, 0, 0 ], // 88
[ 2, 1, 2, 1, 4, 1, 0, 0 ], // 89
[ 2, 1, 4, 1, 2, 1, 0, 0 ], // 90
[ 4, 1, 2, 1, 2, 1, 0, 0 ], // 91
[ 1, 1, 1, 1, 4, 3, 0, 0 ], // 92
[ 1, 1, 1, 3, 4, 1, 0, 0 ], // 93
[ 1, 3, 1, 1, 4, 1, 0, 0 ], // 94
[ 1, 1, 4, 1, 1, 3, 0, 0 ], // 95
[ 1, 1, 4, 3, 1, 1, 0, 0 ], // 96
[ 4, 1, 1, 1, 1, 3, 0, 0 ], // 97
[ 4, 1, 1, 3, 1, 1, 0, 0 ], // 98
[ 1, 1, 3, 1, 4, 1, 0, 0 ], // 99
[ 1, 1, 4, 1, 3, 1, 0, 0 ], // 100
[ 3, 1, 1, 1, 4, 1, 0, 0 ], // 101
[ 4, 1, 1, 1, 3, 1, 0, 0 ], // 102
[ 2, 1, 1, 4, 1, 2, 0, 0 ], // 103
[ 2, 1, 1, 2, 1, 4, 0, 0 ], // 104
[ 2, 1, 1, 2, 3, 2, 0, 0 ], // 105
[ 2, 3, 3, 1, 1, 1, 2, 0 ] ];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImJhcmNvZGUuanMiXSwibmFtZXMiOlsiQ0hBUl9USUxERSIsIkNPREVfRk5DMSIsIlNFVF9TVEFSVEEiLCJTRVRfU1RBUlRCIiwiU0VUX1NUQVJUQyIsIlNFVF9TSElGVCIsIlNFVF9DT0RFQSIsIlNFVF9DT0RFQiIsIlNFVF9TVE9QIiwiUkVQTEFDRV9DT0RFUyIsIkNPREVTRVQiLCJBTlkiLCJBQiIsIkEiLCJCIiwiQyIsImdldEJ5dGVzIiwic3RyIiwiYnl0ZXMiLCJpIiwibGVuZ3RoIiwicHVzaCIsImNoYXJDb2RlQXQiLCJleHBvcnRzIiwiY29kZTEyOCIsImN0eCIsInRleHQiLCJ3aWR0aCIsImhlaWdodCIsInBhcnNlSW50IiwiY29kZXMiLCJzdHJpbmdUb0NvZGUxMjgiLCJnIiwiR3JhcGhpY3MiLCJiYXJXZWlnaHQiLCJhcmVhIiwieCIsImxlZnQiLCJ5IiwidG9wIiwiYyIsImJhciIsImJhclciLCJQQVRURVJOUyIsImJhckgiLCJzcGNXIiwiZmlsbEZnUmVjdCIsImRyYXciLCJiYXJjIiwiY3VycmNzIiwiaW5kZXgiLCJjc2ExIiwiY29kZVNldEFsbG93ZWRGb3IiLCJjc2EyIiwiZ2V0QmVzdFN0YXJ0U2V0IiwicGVyaGFwc0NvZGVDIiwiQXJyYXkiLCJiMSIsImIyIiwiY29uY2F0IiwiY29kZXNGb3JDaGFyIiwiY2hlY2tzdW0iLCJ3ZWlnaHQiLCJ2b3RlIiwiY29kZXNldCIsImIiLCJjaHIxIiwiY2hyMiIsInJlc3VsdCIsInNoaWZ0ZXIiLCJjaGFyQ29tcGF0aWJsZSIsImNvZGVWYWx1ZSIsIlN0cmluZyIsImZyb21DaGFyQ29kZSIsImNociIsImNzYSIsInF1aWV0IiwiTWF0aCIsInJvdW5kIiwiYm9yZGVyX3NpemUiLCJwYWRkaW5nX3dpZHRoIiwiZmciLCJiZyIsImZpbGxCZ1JlY3QiLCJwcm90b3R5cGUiLCJfZmlsbFJlY3QiLCJjb2xvciIsInNldEZpbGxTdHlsZSIsImZpbGxSZWN0Il0sIm1hcHBpbmdzIjoiOztBQUFBLElBQUlB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QXRCLENBekdhLEVBeUdjO0FBQzNCLENBQUMsQ0FBRCxFQUFJLENBQUosRUFBTyxDQUFQLEVBQVUsQ0FBVixFQUFhLENBQWIsRUFBZ0IsQ0FBaEIsRUFBbUIsQ0FBbkIsRUFBc0IsQ0FBdEIsQ0ExR2EsRUEwR2M7QUFDM0IsQ0FBQyxDQUFELEVBQUksQ0FBSixFQUFPLENBQVAsRUFBVSxDQUFWLEVBQWEsQ0FBYixFQUFnQixDQUFoQixFQUFtQixDQUFuQixFQUFzQixDQUF0QixDQTNHYSxDQTJHYztBQTNHZCxDQUFmIiwiZmlsZSI6ImJhcmNvZGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgQ0hBUl9USUxERSA9IDEyNlxudmFyIENPREVfRk5DMSA9IDEwMlxuXG52YXIgU0VUX1NUQVJUQSA9IDEwM1xudmFyIFNFVF9TVEFSVEIgPSAxMDRcbnZhciBTRVRfU1RBUlRDID0gMTA1XG52YXIgU0VUX1NISUZUID0gOThcbnZhciBTRVRfQ09ERUEgPSAxMDFcbnZhciBTRVRfQ09ERUIgPSAxMDBcbnZhciBTRVRfU1RPUCA9IDEwNlxuXG52YXIgUkVQTEFDRV9DT0RFUyA9IHtcbiAgQ0hBUl9USUxERTogQ09ERV9GTkMxIC8vfiBjb3JyZXNwb25kcyB0byBGTkMxIGluIEdTMS0xMjggc3RhbmRhcmRcbn1cblxudmFyIENPREVTRVQgPSB7XG4gIEFOWTogMSxcbiAgQUI6IDIsXG4gIEE6IDMsXG4gIEI6IDQsXG4gIEM6IDVcbn1cblxuZnVuY3Rpb24gZ2V0Qnl0ZXMoc3RyKSB7XG4gIHZhciBieXRlcyA9IFtdXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgaSsrKSB7XG4gICAgYnl0ZXMucHVzaChzdHIuY2hhckNvZGVBdChpKSlcbiAgfVxuICByZXR1cm4gYnl0ZXNcbn1cblxuZXhwb3J0cy5jb2RlMTI4ID0gZnVuY3Rpb24gKGN0eCwgdGV4dCwgd2lkdGgsIGhlaWdodCkge1xuXG4gIHdpZHRoID0gcGFyc2VJbnQod2lkdGgpXG5cbiAgaGVpZ2h0ID0gcGFyc2VJbnQoaGVpZ2h0KVxuXG4gIHZhciBjb2RlcyA9IHN0cmluZ1RvQ29kZTEyOCh0ZXh0KVxuXG4gIHZhciBnID0gbmV3IEdyYXBoaWNzKGN0eCwgd2lkdGgsIGhlaWdodClcblxuICB2YXIgYmFyV2VpZ2h0ID0gZy5hcmVhLndpZHRoIC8gKChjb2Rlcy5sZW5ndGggLSAzKSAqIDExICsgMzUpXG5cbiAgdmFyIHggPSBnLmFyZWEubGVmdFxuICB2YXIgeSA9IGcuYXJlYS50b3BcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBjb2Rlcy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBjID0gY29kZXNbaV1cbiAgICAvL3R3byBiYXJzIGF0IGEgdGltZTogMSBibGFjayBhbmQgMSB3aGl0ZVxuICAgIGZvciAodmFyIGJhciA9IDA7IGJhciA8IDg7IGJhciArPSAyKSB7XG4gICAgICB2YXIgYmFyVyA9IFBBVFRFUk5TW2NdW2Jhcl0gKiBiYXJXZWlnaHRcbiAgICAgIC8vIHZhciBiYXJIID0gaGVpZ2h0IC0geSAtIHRoaXMuYm9yZGVyO1xuICAgICAgdmFyIGJhckggPSBoZWlnaHQgLSB5XG4gICAgICB2YXIgc3BjVyA9IFBBVFRFUk5TW2NdW2JhciArIDFdICogYmFyV2VpZ2h0XG5cbiAgICAgIC8vbm8gbmVlZCB0byBkcmF3IGlmIDAgd2lkdGhcbiAgICAgIGlmIChiYXJXID4gMCkge1xuICAgICAgICBnLmZpbGxGZ1JlY3QoeCwgeSwgYmFyVywgYmFySClcbiAgICAgIH1cblxuICAgICAgeCArPSBiYXJXICsgc3BjV1xuICAgIH1cbiAgfVxuICBjdHguZHJhdygpXG59XG5cbmZ1bmN0aW9uIHN0cmluZ1RvQ29kZTEyOCh0ZXh0KSB7XG5cbiAgdmFyIGJhcmMgPSB7XG4gICAgY3VycmNzOiBDT0RFU0VULkNcbiAgfVxuXG4gIHZhciBieXRlcyA9IGdldEJ5dGVzKHRleHQpXG4gIC8vZGVjaWRlIHN0YXJ0aW5nIGNvZGVzZXRcbiAgdmFyIGluZGV4ID0gYnl0ZXNbMF0gPT0gQ0hBUl9USUxERSA/IDEgOiAwXG5cbiAgdmFyIGNzYTEgPSBieXRlcy5sZW5ndGggPiAwID8gY29kZVNldEFsbG93ZWRGb3IoYnl0ZXNbaW5kZXgrK10pIDogQ09ERVNFVC5BQlxuICB2YXIgY3NhMiA9IGJ5dGVzLmxlbmd0aCA+IDAgPyBjb2RlU2V0QWxsb3dlZEZvcihieXRlc1tpbmRleCsrXSkgOiBDT0RFU0VULkFCXG4gIGJhcmMuY3VycmNzID0gZ2V0QmVzdFN0YXJ0U2V0KGNzYTEsIGNzYTIpXG4gIGJhcmMuY3VycmNzID0gcGVyaGFwc0NvZGVDKGJ5dGVzLCBiYXJjLmN1cnJjcylcblxuICAvL2lmIG5vIGNvZGVzZXQgY2hhbmdlcyB0aGlzIHdpbGwgZW5kIHVwIHdpdGggYnl0ZXMubGVuZ3RoKzNcbiAgLy9zdGFydCwgY2hlY2tzdW0gYW5kIHN0b3BcbiAgdmFyIGNvZGVzID0gbmV3IEFycmF5KClcblxuICBzd2l0Y2ggKGJhcmMuY3VycmNzKSB7XG4gICAgY2FzZSBDT0RFU0VULkE6XG4gICAgICBjb2Rlcy5wdXNoKFNFVF9TVEFSVEEpXG4gICAgICBicmVha1xuICAgIGNhc2UgQ09ERVNFVC5COlxuICAgICAgY29kZXMucHVzaChTRVRfU1RBUlRCKVxuICAgICAgYnJlYWtcbiAgICBkZWZhdWx0OlxuICAgICAgY29kZXMucHVzaChTRVRfU1RBUlRDKVxuICAgICAgYnJlYWtcbiAgfVxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYnl0ZXMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgYjEgPSBieXRlc1tpXSAvL2dldCB0aGUgZmlyc3Qgb2YgYSBwYWlyXG4gICAgLy9zaG91bGQgd2UgdHJhbnNsYXRlL3JlcGxhY2VcbiAgICBpZiAoYjEgaW4gUkVQTEFDRV9DT0RFUykge1xuICAgICAgY29kZXMucHVzaChSRVBMQUNFX0NPREVTW2IxXSlcbiAgICAgIGkrKyAvL2p1bXAgdG8gbmV4dFxuICAgICAgYjEgPSBieXRlc1tpXVxuICAgIH1cblxuICAgIC8vZ2V0IHRoZSBuZXh0IGluIHRoZSBwYWlyIGlmIHBvc3NpYmxlXG4gICAgdmFyIGIyID0gYnl0ZXMubGVuZ3RoID4gKGkgKyAxKSA/IGJ5dGVzW2kgKyAxXSA6IC0xXG5cbiAgICBjb2RlcyA9IGNvZGVzLmNvbmNhdChjb2Rlc0ZvckNoYXIoYjEsIGIyLCBiYXJjLmN1cnJjcykpXG4gICAgLy9jb2RlIEMgdGFrZXMgMiBjaGFycyBlYWNoIHRpbWVcbiAgICBpZiAoYmFyYy5jdXJyY3MgPT0gQ09ERVNFVC5DKSBpKytcbiAgfVxuXG4gIC8vY2FsY3VsYXRlIGNoZWNrc3VtIGFjY29yZGluZyB0byBDb2RlIDEyOCBzdGFuZGFyZHNcbiAgdmFyIGNoZWNrc3VtID0gY29kZXNbMF1cbiAgZm9yICh2YXIgd2VpZ2h0ID0gMTsgd2VpZ2h0IDwgY29kZXMubGVuZ3RoOyB3ZWlnaHQrKykge1xuICAgIGNoZWNrc3VtICs9ICh3ZWlnaHQgKiBjb2Rlc1t3ZWlnaHRdKVxuICB9XG4gIGNvZGVzLnB1c2goY2hlY2tzdW0gJSAxMDMpXG5cbiAgY29kZXMucHVzaChTRVRfU1RPUClcblxuICAvL2VuY29kaW5nIHNob3VsZCBub3cgYmUgY29tcGxldGVcbiAgcmV0dXJuIGNvZGVzXG5cbiAgZnVuY3Rpb24gZ2V0QmVzdFN0YXJ0U2V0KGNzYTEsIGNzYTIpIHtcbiAgICAvL3RyaWVzIHRvIGZpZ3VyZSBvdXQgdGhlIGJlc3QgY29kZXNldFxuICAgIC8vdG8gc3RhcnQgd2l0aCB0byBnZXQgdGhlIG1vc3QgY29tcGFjdCBjb2RlXG4gICAgdmFyIHZvdGUgPSAwXG4gICAgdm90ZSArPSBjc2ExID09IENPREVTRVQuQSA/IDEgOiAwXG4gICAgdm90ZSArPSBjc2ExID09IENPREVTRVQuQiA/IC0xIDogMFxuICAgIHZvdGUgKz0gY3NhMiA9PSBDT0RFU0VULkEgPyAxIDogMFxuICAgIHZvdGUgKz0gY3NhMiA9PSBDT0RFU0VULkIgPyAtMSA6IDBcbiAgICAvL3RpZSBnb2VzIHRvIEIgZHVlIHRvIG15IG93biBwcmVkdWRpY2VzXG4gICAgcmV0dXJuIHZvdGUgPiAwID8gQ09ERVNFVC5BIDogQ09ERVNFVC5CXG4gIH1cblxuICBmdW5jdGlvbiBwZXJoYXBzQ29kZUMoYnl0ZXMsIGNvZGVzZXQpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGJ5dGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgYiA9IGJ5dGVzW2ldXG4gICAgICBpZiAoKGIgPCA0OCB8fCBiID4gNTcpICYmIGIgIT0gQ0hBUl9USUxERSlcbiAgICAgICAgcmV0dXJuIGNvZGVzZXRcbiAgICB9XG4gICAgcmV0dXJuIENPREVTRVQuQ1xuICB9XG5cbiAgLy9jaHIxIGlzIGN1cnJlbnQgYnl0ZVxuICAvL2NocjIgaXMgdGhlIG5leHQgYnl0ZSB0byBwcm9jZXNzLiBsb29rcyBhaGVhZC5cbiAgZnVuY3Rpb24gY29kZXNGb3JDaGFyKGNocjEsIGNocjIsIGN1cnJjcykge1xuICAgIHZhciByZXN1bHQgPSBbXVxuICAgIHZhciBzaGlmdGVyID0gLTFcblxuICAgIGlmIChjaGFyQ29tcGF0aWJsZShjaHIxLCBjdXJyY3MpKSB7XG4gICAgICBpZiAoY3VycmNzID09IENPREVTRVQuQykge1xuICAgICAgICBpZiAoY2hyMiA9PSAtMSkge1xuICAgICAgICAgIHNoaWZ0ZXIgPSBTRVRfQ09ERUJcbiAgICAgICAgICBjdXJyY3MgPSBDT0RFU0VULkJcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICgoY2hyMiAhPSAtMSkgJiYgIWNoYXJDb21wYXRpYmxlKGNocjIsIGN1cnJjcykpIHtcbiAgICAgICAgICAvL25lZWQgdG8gY2hlY2sgYWhlYWQgYXMgd2VsbFxuICAgICAgICAgIGlmIChjaGFyQ29tcGF0aWJsZShjaHIyLCBDT0RFU0VULkEpKSB7XG4gICAgICAgICAgICBzaGlmdGVyID0gU0VUX0NPREVBXG4gICAgICAgICAgICBjdXJyY3MgPSBDT0RFU0VULkFcbiAgICAgICAgICB9XG4gICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBzaGlmdGVyID0gU0VUX0NPREVCXG4gICAgICAgICAgICBjdXJyY3MgPSBDT0RFU0VULkJcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAvL2lmIHRoZXJlIGlzIGEgbmV4dCBjaGFyIEFORCB0aGF0IG5leHQgY2hhciBpcyBhbHNvIG5vdCBjb21wYXRpYmxlXG4gICAgICBpZiAoKGNocjIgIT0gLTEpICYmICFjaGFyQ29tcGF0aWJsZShjaHIyLCBjdXJyY3MpKSB7XG4gICAgICAgIC8vbmVlZCB0byBzd2l0Y2ggY29kZSBzZXRzXG4gICAgICAgIHN3aXRjaCAoY3VycmNzKSB7XG4gICAgICAgICAgY2FzZSBDT0RFU0VULkE6XG4gICAgICAgICAgICBzaGlmdGVyID0gU0VUX0NPREVCXG4gICAgICAgICAgICBjdXJyY3MgPSBDT0RFU0VULkJcbiAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgY2FzZSBDT0RFU0VULkI6XG4gICAgICAgICAgICBzaGlmdGVyID0gU0VUX0NPREVBXG4gICAgICAgICAgICBjdXJyY3MgPSBDT0RFU0VULkFcbiAgICAgICAgICAgIGJyZWFrXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICAvL25vIG5lZWQgdG8gc2hpZnQgY29kZSBzZXRzLCBhIHRlbXBvcmFyeSBTSElGVCB3aWxsIHN1ZmZpY2VcbiAgICAgICAgc2hpZnRlciA9IFNFVF9TSElGVFxuICAgICAgfVxuICAgIH1cblxuICAgIC8vb2sgc29tZSB0eXBlIG9mIHNoaWZ0IGlzIG5lc3NlY2FyeVxuICAgIGlmIChzaGlmdGVyICE9IC0xKSB7XG4gICAgICByZXN1bHQucHVzaChzaGlmdGVyKVxuICAgICAgcmVzdWx0LnB1c2goY29kZVZhbHVlKGNocjEpKVxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIGlmIChjdXJyY3MgPT0gQ09ERVNFVC5DKSB7XG4gICAgICAgIC8vaW5jbHVkZSBuZXh0IGFzIHdlbGxcbiAgICAgICAgcmVzdWx0LnB1c2goY29kZVZhbHVlKGNocjEsIGNocjIpKVxuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIHJlc3VsdC5wdXNoKGNvZGVWYWx1ZShjaHIxKSlcbiAgICAgIH1cbiAgICB9XG4gICAgYmFyYy5jdXJyY3MgPSBjdXJyY3NcblxuICAgIHJldHVybiByZXN1bHRcbiAgfVxufVxuXG4vL3JlZHVjZSB0aGUgYXNjaWkgY29kZSB0byBmaXQgaW50byB0aGUgQ29kZTEyOCBjaGFyIHRhYmxlXG5mdW5jdGlvbiBjb2RlVmFsdWUoY2hyMSwgY2hyMikge1xuICBpZiAodHlwZW9mIGNocjIgPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm4gY2hyMSA+PSAzMiA/IGNocjEgLSAzMiA6IGNocjEgKyA2NFxuICB9XG4gIGVsc2Uge1xuICAgIHJldHVybiBwYXJzZUludChTdHJpbmcuZnJvbUNoYXJDb2RlKGNocjEpICsgU3RyaW5nLmZyb21DaGFyQ29kZShjaHIyKSlcbiAgfVxufVxuXG5mdW5jdGlvbiBjaGFyQ29tcGF0aWJsZShjaHIsIGNvZGVzZXQpIHtcbiAgdmFyIGNzYSA9IGNvZGVTZXRBbGxvd2VkRm9yKGNocilcbiAgaWYgKGNzYSA9PSBDT0RFU0VULkFOWSkgcmV0dXJuIHRydWVcbiAgLy9pZiB3ZSBuZWVkIHRvIGNoYW5nZSBmcm9tIGN1cnJlbnRcbiAgaWYgKGNzYSA9PSBDT0RFU0VULkFCKSByZXR1cm4gdHJ1ZVxuICBpZiAoY3NhID09IENPREVTRVQuQSAmJiBjb2Rlc2V0ID09IENPREVTRVQuQSkgcmV0dXJuIHRydWVcbiAgaWYgKGNzYSA9PSBDT0RFU0VULkIgJiYgY29kZXNldCA9PSBDT0RFU0VULkIpIHJldHVybiB0cnVlXG4gIHJldHVybiBmYWxzZVxufVxuXG5mdW5jdGlvbiBjb2RlU2V0QWxsb3dlZEZvcihjaHIpIHtcbiAgaWYgKGNociA+PSA0OCAmJiBjaHIgPD0gNTcpIHtcbiAgICAvLzAtOVxuICAgIHJldHVybiBDT0RFU0VULkFOWVxuICB9XG4gIGVsc2UgaWYgKGNociA+PSAzMiAmJiBjaHIgPD0gOTUpIHtcbiAgICAvLzAtOSBBLVpcbiAgICByZXR1cm4gQ09ERVNFVC5BQlxuICB9XG4gIGVsc2Uge1xuICAgIC8vaWYgbm9uIHByaW50YWJsZVxuICAgIHJldHVybiBjaHIgPCAzMiA/IENPREVTRVQuQSA6IENPREVTRVQuQlxuICB9XG59XG5cbnZhciBHcmFwaGljcyA9IGZ1bmN0aW9uIChjdHgsIHdpZHRoLCBoZWlnaHQpIHtcblxuICB0aGlzLndpZHRoID0gd2lkdGhcbiAgdGhpcy5oZWlnaHQgPSBoZWlnaHRcbiAgdGhpcy5xdWlldCA9IE1hdGgucm91bmQodGhpcy53aWR0aCAvIDQwKVxuXG4gIHRoaXMuYm9yZGVyX3NpemUgPSAwXG4gIHRoaXMucGFkZGluZ193aWR0aCA9IDBcblxuICB0aGlzLmFyZWEgPSB7XG4gICAgd2lkdGg6IHdpZHRoIC0gdGhpcy5wYWRkaW5nX3dpZHRoICogMiAtIHRoaXMucXVpZXQgKiAyLFxuICAgIGhlaWdodDogaGVpZ2h0IC0gdGhpcy5ib3JkZXJfc2l6ZSAqIDIsXG4gICAgdG9wOiB0aGlzLmJvcmRlcl9zaXplIC0gNCxcbiAgICBsZWZ0OiB0aGlzLnBhZGRpbmdfd2lkdGggKyB0aGlzLnF1aWV0XG4gIH1cblxuICB0aGlzLmN0eCA9IGN0eFxuICB0aGlzLmZnID0gJyMwMDAwMDAnXG4gIHRoaXMuYmcgPSAnI2ZmZmZmZidcblxuICAvLyBmaWxsIGJhY2tncm91bmRcbiAgdGhpcy5maWxsQmdSZWN0KDAsIDAsIHdpZHRoLCBoZWlnaHQpXG5cbiAgLy8gZmlsbCBjZW50ZXIgdG8gY3JlYXRlIGJvcmRlclxuICB0aGlzLmZpbGxCZ1JlY3QoMCwgdGhpcy5ib3JkZXJfc2l6ZSwgd2lkdGgsIGhlaWdodCAtIHRoaXMuYm9yZGVyX3NpemUgKiAyKVxufVxuXG4vL3VzZSBuYXRpdmUgY29sb3JcbkdyYXBoaWNzLnByb3RvdHlwZS5fZmlsbFJlY3QgPSBmdW5jdGlvbiAoeCwgeSwgd2lkdGgsIGhlaWdodCwgY29sb3IpIHtcbiAgdGhpcy5jdHguc2V0RmlsbFN0eWxlKGNvbG9yKVxuICB0aGlzLmN0eC5maWxsUmVjdCh4LCB5LCB3aWR0aCwgaGVpZ2h0KVxufVxuXG5HcmFwaGljcy5wcm90b3R5cGUuZmlsbEZnUmVjdCA9IGZ1bmN0aW9uICh4LCB5LCB3aWR0aCwgaGVpZ2h0KSB7XG4gIHRoaXMuX2ZpbGxSZWN0KHgsIHksIHdpZHRoLCBoZWlnaHQsIHRoaXMuZmcpXG59XG5cbkdyYXBoaWNzLnByb3RvdHlwZS5maWxsQmdSZWN0ID0gZnVuY3Rpb24gKHgsIHksIHdpZHRoLCBoZWlnaHQpIHtcbiAgdGhpcy5fZmlsbFJlY3QoeCwgeSwgd2lkdGgsIGhlaWdodCwgdGhpcy5iZylcbn1cblxudmFyIFBBVFRFUk5TID0gW1xuICBbMiwgMSwgMiwgMiwgMiwgMiwgMCwgMF0sICAvLyAwXG4gIFsyLCAyLCAyLCAxLCAyLCAyLCAwLCAwXSwgIC8vIDFcbiAgWzIsIDIsIDIsIDIsIDIsIDEsIDAsIDBdLCAgLy8gMlxuICBbMSwgMiwgMSwgMiwgMiwgMywgMCwgMF0sICAvLyAzXG4gIFsxLCAyLCAxLCAzLCAyLCAyLCAwLCAwXSwgIC8vIDRcbiAgWzEsIDMsIDEsIDIsIDIsIDIsIDAsIDBdLCAgLy8gNVxuICBbMSwgMiwgMiwgMiwgMSwgMywgMCwgMF0sICAvLyA2XG4gIFsxLCAyLCAyLCAzLCAxLCAyLCAwLCAwXSwgIC8vIDdcbiAgWzEsIDMsIDIsIDIsIDEsIDIsIDAsIDBdLCAgLy8gOFxuICBbMiwgMiwgMSwgMiwgMSwgMywgMCwgMF0sICAvLyA5XG4gIFsyLCAyLCAxLCAzLCAxLCAyLCAwLCAwXSwgIC8vIDEwXG4gIFsyLCAzLCAxLCAyLCAxLCAyLCAwLCAwXSwgIC8vIDExXG4gIFsxLCAxLCAyLCAyLCAzLCAyLCAwLCAwXSwgIC8vIDEyXG4gIFsxLCAyLCAyLCAxLCAzLCAyLCAwLCAwXSwgIC8vIDEzXG4gIFsxLCAyLCAyLCAyLCAzLCAxLCAwLCAwXSwgIC8vIDE0XG4gIFsxLCAxLCAzLCAyLCAyLCAyLCAwLCAwXSwgIC8vIDE1XG4gIFsxLCAyLCAzLCAxLCAyLCAyLCAwLCAwXSwgIC8vIDE2XG4gIFsxLCAyLCAzLCAyLCAyLCAxLCAwLCAwXSwgIC8vIDE3XG4gIFsyLCAyLCAzLCAyLCAxLCAxLCAwLCAwXSwgIC8vIDE4XG4gIFsyLCAyLCAxLCAxLCAzLCAyLCAwLCAwXSwgIC8vIDE5XG4gIFsyLCAyLCAxLCAyLCAzLCAxLCAwLCAwXSwgIC8vIDIwXG4gIFsyLCAxLCAzLCAyLCAxLCAyLCAwLCAwXSwgIC8vIDIxXG4gIFsyLCAyLCAzLCAxLCAxLCAyLCAwLCAwXSwgIC8vIDIyXG4gIFszLCAxLCAyLCAxLCAzLCAxLCAwLCAwXSwgIC8vIDIzXG4gIFszLCAxLCAxLCAyLCAyLCAyLCAwLCAwXSwgIC8vIDI0XG4gIFszLCAyLCAxLCAxLCAyLCAyLCAwLCAwXSwgIC8vIDI1XG4gIFszLCAyLCAxLCAyLCAyLCAxLCAwLCAwXSwgIC8vIDI2XG4gIFszLCAxLCAyLCAyLCAxLCAyLCAwLCAwXSwgIC8vIDI3XG4gIFszLCAyLCAyLCAxLCAxLCAyLCAwLCAwXSwgIC8vIDI4XG4gIFszLCAyLCAyLCAyLCAxLCAxLCAwLCAwXSwgIC8vIDI5XG4gIFsyLCAxLCAyLCAxLCAyLCAzLCAwLCAwXSwgIC8vIDMwXG4gIFsyLCAxLCAyLCAzLCAyLCAxLCAwLCAwXSwgIC8vIDMxXG4gIFsyLCAzLCAyLCAxLCAyLCAxLCAwLCAwXSwgIC8vIDMyXG4gIFsxLCAxLCAxLCAzLCAyLCAzLCAwLCAwXSwgIC8vIDMzXG4gIFsxLCAzLCAxLCAxLCAyLCAzLCAwLCAwXSwgIC8vIDM0XG4gIFsxLCAzLCAxLCAzLCAyLCAxLCAwLCAwXSwgIC8vIDM1XG4gIFsxLCAxLCAyLCAzLCAxLCAzLCAwLCAwXSwgIC8vIDM2XG4gIFsxLCAzLCAyLCAxLCAxLCAzLCAwLCAwXSwgIC8vIDM3XG4gIFsxLCAzLCAyLCAzLCAxLCAxLCAwLCAwXSwgIC8vIDM4XG4gIFsyLCAxLCAxLCAzLCAxLCAzLCAwLCAwXSwgIC8vIDM5XG4gIFsyLCAzLCAxLCAxLCAxLCAzLCAwLCAwXSwgIC8vIDQwXG4gIFsyLCAzLCAxLCAzLCAxLCAxLCAwLCAwXSwgIC8vIDQxXG4gIFsxLCAxLCAyLCAxLCAzLCAzLCAwLCAwXSwgIC8vIDQyXG4gIFsxLCAxLCAyLCAzLCAzLCAxLCAwLCAwXSwgIC8vIDQzXG4gIFsxLCAzLCAyLCAxLCAzLCAxLCAwLCAwXSwgIC8vIDQ0XG4gIFsxLCAxLCAzLCAxLCAyLCAzLCAwLCAwXSwgIC8vIDQ1XG4gIFsxLCAxLCAzLCAzLCAyLCAxLCAwLCAwXSwgIC8vIDQ2XG4gIFsxLCAzLCAzLCAxLCAyLCAxLCAwLCAwXSwgIC8vIDQ3XG4gIFszLCAxLCAzLCAxLCAyLCAxLCAwLCAwXSwgIC8vIDQ4XG4gIFsyLCAxLCAxLCAzLCAzLCAxLCAwLCAwXSwgIC8vIDQ5XG4gIFsyLCAzLCAxLCAxLCAzLCAxLCAwLCAwXSwgIC8vIDUwXG4gIFsyLCAxLCAzLCAxLCAxLCAzLCAwLCAwXSwgIC8vIDUxXG4gIFsyLCAxLCAzLCAzLCAxLCAxLCAwLCAwXSwgIC8vIDUyXG4gIFsyLCAxLCAzLCAxLCAzLCAxLCAwLCAwXSwgIC8vIDUzXG4gIFszLCAxLCAxLCAxLCAyLCAzLCAwLCAwXSwgIC8vIDU0XG4gIFszLCAxLCAxLCAzLCAyLCAxLCAwLCAwXSwgIC8vIDU1XG4gIFszLCAzLCAxLCAxLCAyLCAxLCAwLCAwXSwgIC8vIDU2XG4gIFszLCAxLCAyLCAxLCAxLCAzLCAwLCAwXSwgIC8vIDU3XG4gIFszLCAxLCAyLCAzLCAxLCAxLCAwLCAwXSwgIC8vIDU4XG4gIFszLCAzLCAyLCAxLCAxLCAxLCAwLCAwXSwgIC8vIDU5XG4gIFszLCAxLCA0LCAxLCAxLCAxLCAwLCAwXSwgIC8vIDYwXG4gIFsyLCAyLCAxLCA0LCAxLCAxLCAwLCAwXSwgIC8vIDYxXG4gIFs0LCAzLCAxLCAxLCAxLCAxLCAwLCAwXSwgIC8vIDYyXG4gIFsxLCAxLCAxLCAyLCAyLCA0LCAwLCAwXSwgIC8vIDYzXG4gIFsxLCAxLCAxLCA0LCAyLCAyLCAwLCAwXSwgIC8vIDY0XG4gIFsxLCAyLCAxLCAxLCAyLCA0LCAwLCAwXSwgIC8vIDY1XG4gIFsxLCAyLCAxLCA0LCAyLCAxLCAwLCAwXSwgIC8vIDY2XG4gIFsxLCA0LCAxLCAxLCAyLCAyLCAwLCAwXSwgIC8vIDY3XG4gIFsxLCA0LCAxLCAyLCAyLCAxLCAwLCAwXSwgIC8vIDY4XG4gIFsxLCAxLCAyLCAyLCAxLCA0LCAwLCAwXSwgIC8vIDY5XG4gIFsxLCAxLCAyLCA0LCAxLCAyLCAwLCAwXSwgIC8vIDcwXG4gIFsxLCAyLCAyLCAxLCAxLCA0LCAwLCAwXSwgIC8vIDcxXG4gIFsxLCAyLCAyLCA0LCAxLCAxLCAwLCAwXSwgIC8vIDcyXG4gIFsxLCA0LCAyLCAxLCAxLCAyLCAwLCAwXSwgIC8vIDczXG4gIFsxLCA0LCAyLCAyLCAxLCAxLCAwLCAwXSwgIC8vIDc0XG4gIFsyLCA0LCAxLCAyLCAxLCAxLCAwLCAwXSwgIC8vIDc1XG4gIFsyLCAyLCAxLCAxLCAxLCA0LCAwLCAwXSwgIC8vIDc2XG4gIFs0LCAxLCAzLCAxLCAxLCAxLCAwLCAwXSwgIC8vIDc3XG4gIFsyLCA0LCAxLCAxLCAxLCAyLCAwLCAwXSwgIC8vIDc4XG4gIFsxLCAzLCA0LCAxLCAxLCAxLCAwLCAwXSwgIC8vIDc5XG4gIFsxLCAxLCAxLCAyLCA0LCAyLCAwLCAwXSwgIC8vIDgwXG4gIFsxLCAyLCAxLCAxLCA0LCAyLCAwLCAwXSwgIC8vIDgxXG4gIFsxLCAyLCAxLCAyLCA0LCAxLCAwLCAwXSwgIC8vIDgyXG4gIFsxLCAxLCA0LCAyLCAxLCAyLCAwLCAwXSwgIC8vIDgzXG4gIFsxLCAyLCA0LCAxLCAxLCAyLCAwLCAwXSwgIC8vIDg0XG4gIFsxLCAyLCA0LCAyLCAxLCAxLCAwLCAwXSwgIC8vIDg1XG4gIFs0LCAxLCAxLCAyLCAxLCAyLCAwLCAwXSwgIC8vIDg2XG4gIFs0LCAyLCAxLCAxLCAxLCAyLCAwLCAwXSwgIC8vIDg3XG4gIFs0LCAyLCAxLCAyLCAxLCAxLCAwLCAwXSwgIC8vIDg4XG4gIFsyLCAxLCAyLCAxLCA0LCAxLCAwLCAwXSwgIC8vIDg5XG4gIFsyLCAxLCA0LCAxLCAyLCAxLCAwLCAwXSwgIC8vIDkwXG4gIFs0LCAxLCAyLCAxLCAyLCAxLCAwLCAwXSwgIC8vIDkxXG4gIFsxLCAxLCAxLCAxLCA0LCAzLCAwLCAwXSwgIC8vIDkyXG4gIFsxLCAxLCAxLCAzLCA0LCAxLCAwLCAwXSwgIC8vIDkzXG4gIFsxLCAzLCAxLCAxLCA0LCAxLCAwLCAwXSwgIC8vIDk0XG4gIFsxLCAxLCA0LCAxLCAxLCAzLCAwLCAwXSwgIC8vIDk1XG4gIFsxLCAxLCA0LCAzLCAxLCAxLCAwLCAwXSwgIC8vIDk2XG4gIFs0LCAxLCAxLCAxLCAxLCAzLCAwLCAwXSwgIC8vIDk3XG4gIFs0LCAxLCAxLCAzLCAxLCAxLCAwLCAwXSwgIC8vIDk4XG4gIFsxLCAxLCAzLCAxLCA0LCAxLCAwLCAwXSwgIC8vIDk5XG4gIFsxLCAxLCA0LCAxLCAzLCAxLCAwLCAwXSwgIC8vIDEwMFxuICBbMywgMSwgMSwgMSwgNCwgMSwgMCwgMF0sICAvLyAxMDFcbiAgWzQsIDEsIDEsIDEsIDMsIDEsIDAsIDBdLCAgLy8gMTAyXG4gIFsyLCAxLCAxLCA0LCAxLCAyLCAwLCAwXSwgIC8vIDEwM1xuICBbMiwgMSwgMSwgMiwgMSwgNCwgMCwgMF0sICAvLyAxMDRcbiAgWzIsIDEsIDEsIDIsIDMsIDIsIDAsIDBdLCAgLy8gMTA1XG4gIFsyLCAzLCAzLCAxLCAxLCAxLCAyLCAwXSAgIC8vIDEwNlxuXVxuXG4iXX0=